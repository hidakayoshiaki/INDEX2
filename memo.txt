

==================================================================================================
==================================================================================================



ポートフォリオ概要
このポートフォリオは、PHPとMySQLを使用して構築したホテル客室の予約Webアプリケーションです。 ECサイトの基本的な機能である、ユーザーの新規登録・ログインから、商品（客室）の検索、予約（カート機能）、予約履歴の確認までの一連の流れを実装しています。

主な機能とファイル構成
本アプリケーションは、機能ごとにファイルが分割されており、それぞれの役割は以下の通りです。

1. ユーザー認証関連
ユーザーの登録、ログイン・ログアウトといった認証機能です。セッションを用いてログイン状態を管理しています。

form.php: 新規会員登録ページのUIです。
user-information.php: 新規登録処理を行います。パスワードは password_hash() を用いて安全にハッシュ化してからデータベースに保存します。
login.php: ログインページのUIです。
login-process.php: ログイン認証処理を行います。password_verify() でパスワードを検証し、成功するとユーザー情報をセッションに格納します。
logout.php: ログアウト処理を行い、セッションを破棄します。
dashboard.php: ログイン成功後に表示されるシンプルなウェルカムページです。


2. 商品（客室）関連
ホテルの客室を一覧表示したり、詳細情報を確認したりする機能です。

product-page.php: トップページを兼ねた客室一覧ページです。データベースから全客室情報を取得して表示します。サイト内遷移と外部からのアクセスでアニメーションを切り替える工夫をしています。
product_detail.php: 客室の詳細ページです。URLのクエリパラメータ（id）を元に、特定の客室情報を表示します。
search.php: ヘッダーの検索機能から利用されるページで、客室名や説明文によるあいまい検索の結果を表示します。
product-header.php: 各ページで共通して使用されるヘッダー部分です。include を用いてコードの再利用性を高めています。
modal.php: 客室一覧ページで、画像を拡大表示するためのモーダルウィンドウのHTML部品です。


3. 予約・注文関連
ユーザーが選択した客室を予約し、その履歴を管理する機能です。

cart.php: 「予約に追加」ボタンで実行され、選択された客室をユーザーのカート（cartsテーブル）に追加します。
mycart.php: 現在カートに入っている客室の一覧を表示するページです。
order-management.php: 予約確定処理の中核を担うファイルです。以下の処理をデータベーストランザクション内で行うことで、データの整合性を保証しています。
カート内の商品情報を取得
注文テーブル（orders）に注文記録を作成
注文詳細テーブル（order_items）に各商品の情報を記録
カートテーブル（carts）から商品を削除
order-history.php: ログインユーザーの過去の予約履歴を一覧表示します。
order-management-screen.php: （管理者向け）全ユーザーの注文情報を一覧で確認するための管理画面です。


4. ブログ機能
お知らせなどを想定した簡単なブログ機能です。

123.php: 新規記事の投稿フォーム画面です。
1234.php: 記事の投稿処理と、投稿済み記事の一覧表示を行います。フォームの二重送信を防止する PRG (Post/Redirect/Get) パターン を実装しています。
edit.php: 既存の記事を編集するためのフォーム画面です。
update.php: 記事の更新処理を行います。


5. 共通・その他
db.php: データベース接続を担うクラスです。PDOを利用し、接続情報を一元管理することで、保守性と再利用性を高めています。
12345.php: 学習目的でPHPの様々な関数（Cookie操作、cURL、ファイルシステム操作など）を試した実験的なファイルです。
技術的なアピールポイント
セキュリティ意識:

SQLインジェクション対策として、すべてのデータベース操作でプリペアドステートメントを使用しています。
XSS（クロスサイトスクリプティング）対策として、ユーザーからの入力を表示する際は htmlspecialchars() を用いてエスケープ処理を徹底しています。
password_hash() / password_verify() を用いて、パスワードを安全に管理しています。
堅牢なデータ操作:

予約確定処理（order-management.php）においてトランザクションを導入し、複数のテーブル更新処理がすべて成功するか、すべて失敗するかのどちらかになることを保証（アトミック性）しています。これにより、中途半端な状態でデータが残ることを防ぎ、システムの信頼性を高めています。
コードの構造化と再利用性:

データベース接続処理を DbConnection クラスに分離し、各ファイルからインスタンス化して利用する設計にしています。
ヘッダー（product-header.php）など、複数のページで共通するUI部品を別ファイルに切り出し、include で読み込むことで、コードの重複を排除し、メンテナンス性を向上させています。
ユーザー体験への配慮:

ブログ投稿機能にPRGパターンを実装し、ブラウザのリロードによる意図しないフォームの再送信を防いでいます。
トップページのアニメーションをセッションで制御し、サイト内回遊時には不要なアニメーションをスキップさせるなど、細かなUX改善が見られます。






==================================================================================================
==================================================================================================

